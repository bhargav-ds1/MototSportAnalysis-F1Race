geom_vline(xintercept = 0, linetype="dashed", color="red")+xlab("Coefficient of linear regression")+
ylab("Regressors")
# Create a dataframe only including the wet weather races
wet_weather_races <- datax[datax$wetweather==1,]
# Average total pos neg comments for wet weather races
avg_pos_neg_comments_wet <- (sum(wet_weather_races$totalpos)+
sum(wet_weather_races$totalneg))/
sum(wet_weather_races$numberofusefulcomments)
# Average total pos neg comments for normal races
avg_pos_neg_comments_normal <-
(sum(datax[datax$wetweather==0,]$totalpos)+
sum(datax[datax$wetweather==0,]$totalneg))/
sum(datax[datax$wetweather==0,]$numberofusefulcomments)
# Average viewcount for wet weather races
avg_viewcount_wet <- sum(wet_weather_races$viewcount)/dim(wet_weather_races)[1]
# Average viewcount for normal races
avg_viewcount_normal <-
sum(datax[datax$wetweather==0,]$viewcount)/
dim(datax[datax$wetweather==0,])[1]
# Average likecount wet weather races
avg_likecount_wet <- sum(datax$likecount)/dim(datax)[1]
# Average likecount normal races
avg_likecount_normal <-
sum(datax[datax$wetweather==0,]$likecount)/
dim(datax[datax$wetweather==0,])[1]
# Average dislikecount wet weather races
avg_dislikecount_wet <- sum(datax$dislikecount)/dim(datax)[1]
# Average dislikecount normal races
avg_dislikecount_normal <-
sum(datax[datax$wetweather==0,]$dislikecount)/
dim(datax[datax$wetweather==0,])[1]
# Creating a dataframe with all the KPIs, so that they can be displayed in a
# plot.
comparison_wet_normal <- data.frame(c("Nass", "Normal",
"Nass", "Normal",
"Nass", "Normal",
"Nass", "Normal"))
names(comparison_wet_normal) <- "race_type"
comparison_wet_normal$values <- c(avg_pos_neg_comments_wet,
avg_pos_neg_comments_normal,
avg_viewcount_wet,
avg_viewcount_normal,
avg_likecount_wet,
avg_likecount_normal,
avg_dislikecount_wet,
avg_dislikecount_normal)
comparison_wet_normal$column <- c("pos_neg_comments", "pos_neg_comments",
"viewcount", "viewcount",
"likecount", "likecount",
"dislike_count", "dislike_count")
# Create a plot for the viewcount
plot1 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="viewcount",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittliche Zuschaueranzahl") + ylab("")
# Create a plot for likecount
plot2 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="likecount",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittliche Anzahl an Likes") + ylab("")
# Create a plot for dislike count
plot3 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="dislike_count",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittliche Anzahl an Dislikes") + ylab("")
# Create a plot for average number of positive/negative comments
plot4 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())  +
xlab("Anteil pos./neg. Kommentare") + ylab("")
# Create a legend for the plot
plot_legend <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",]
,aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity",
position=position_dodge()) +
theme(legend.position = "right", legend.direction = "horizontal", legend.title = element_blank())
# Some magic for creating a single legend for all the plots together
extract_legend <- function(my_ggp) {
step1 <- ggplot_gtable(ggplot_build(my_ggp))
step2 <- which(sapply(step1$grobs, function(x) x$name) == "guide-box")
step3 <- step1$grobs[[step2]]
return(step3)
}
shared_legend <- extract_legend(plot_legend)
# Create a grid with all the plots together and add the legend created above
grid.arrange(arrangeGrob(plot1,plot2,plot3,plot4, ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
# Create a dataframe only including the wet weather races
wet_weather_races <- datax[datax$wetweather==1,]
# Average total pos neg comments for wet weather races
avg_pos_neg_comments_wet <- (sum(wet_weather_races$totalpos)+
sum(wet_weather_races$totalneg))/
sum(wet_weather_races$numberofusefulcomments)
# Average total pos neg comments for normal races
avg_pos_neg_comments_normal <-
(sum(datax[datax$wetweather==0,]$totalpos)+
sum(datax[datax$wetweather==0,]$totalneg))/
sum(datax[datax$wetweather==0,]$numberofusefulcomments)
# Average viewcount for wet weather races
avg_viewcount_wet <- sum(wet_weather_races$viewcount)/dim(wet_weather_races)[1]
# Average viewcount for normal races
avg_viewcount_normal <-
sum(datax[datax$wetweather==0,]$viewcount)/
dim(datax[datax$wetweather==0,])[1]
# Average likecount wet weather races
avg_likecount_wet <- sum(datax$likecount)/dim(datax)[1]
# Average likecount normal races
avg_likecount_normal <-
sum(datax[datax$wetweather==0,]$likecount)/
dim(datax[datax$wetweather==0,])[1]
# Average dislikecount wet weather races
avg_dislikecount_wet <- sum(datax$dislikecount)/dim(datax)[1]
# Average dislikecount normal races
avg_dislikecount_normal <-
sum(datax[datax$wetweather==0,]$dislikecount)/
dim(datax[datax$wetweather==0,])[1]
# Creating a dataframe with all the KPIs, so that they can be displayed in a
# plot.
comparison_wet_normal <- data.frame(c("Nass", "Normal",
"Nass", "Normal",
"Nass", "Normal",
"Nass", "Normal"))
names(comparison_wet_normal) <- "race_type"
comparison_wet_normal$values <- c(avg_pos_neg_comments_wet,
avg_pos_neg_comments_normal,
avg_viewcount_wet,
avg_viewcount_normal,
avg_likecount_wet,
avg_likecount_normal,
avg_dislikecount_wet,
avg_dislikecount_normal)
comparison_wet_normal$column <- c("pos_neg_comments", "pos_neg_comments",
"viewcount", "viewcount",
"likecount", "likecount",
"dislike_count", "dislike_count")
# Create a plot for the viewcount
plot1 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="viewcount",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittliche Zuschaueranzahl") + ylab("")
# Create a plot for likecount
plot2 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="likecount",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittliche Anzahl an Likes") + ylab("")
# Create a plot for dislike count
plot3 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="dislike_count",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittliche Anzahl an Dislikes") + ylab("")
# Create a plot for average number of positive/negative comments
plot4 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())  +
xlab("Anteil pos./neg. Kommentare") + ylab("")
# Create a legend for the plot
plot_legend <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",]
,aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity",
position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "right", legend.direction = "horizontal", legend.title = element_blank())
# Some magic for creating a single legend for all the plots together
extract_legend <- function(my_ggp) {
step1 <- ggplot_gtable(ggplot_build(my_ggp))
step2 <- which(sapply(step1$grobs, function(x) x$name) == "guide-box")
step3 <- step1$grobs[[step2]]
return(step3)
}
shared_legend <- extract_legend(plot_legend)
# Create a grid with all the plots together and add the legend created above
grid.arrange(arrangeGrob(plot1,plot2,plot3,plot4, ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
# Create a dataframe only including the wet weather races
wet_weather_races <- datax[datax$wetweather==1,]
# Average total pos neg comments for wet weather races
avg_pos_neg_comments_wet <- (sum(wet_weather_races$totalpos)+
sum(wet_weather_races$totalneg))/
sum(wet_weather_races$numberofusefulcomments)
# Average total pos neg comments for normal races
avg_pos_neg_comments_normal <-
(sum(datax[datax$wetweather==0,]$totalpos)+
sum(datax[datax$wetweather==0,]$totalneg))/
sum(datax[datax$wetweather==0,]$numberofusefulcomments)
# Average viewcount for wet weather races
avg_viewcount_wet <- sum(wet_weather_races$viewcount)/dim(wet_weather_races)[1]
# Average viewcount for normal races
avg_viewcount_normal <-
sum(datax[datax$wetweather==0,]$viewcount)/
dim(datax[datax$wetweather==0,])[1]
# Average likecount wet weather races
avg_likecount_wet <- sum(datax$likecount)/dim(datax)[1]
# Average likecount normal races
avg_likecount_normal <-
sum(datax[datax$wetweather==0,]$likecount)/
dim(datax[datax$wetweather==0,])[1]
# Average dislikecount wet weather races
avg_dislikecount_wet <- sum(datax$dislikecount)/dim(datax)[1]
# Average dislikecount normal races
avg_dislikecount_normal <-
sum(datax[datax$wetweather==0,]$dislikecount)/
dim(datax[datax$wetweather==0,])[1]
# Creating a dataframe with all the KPIs, so that they can be displayed in a
# plot.
comparison_wet_normal <- data.frame(c("Nass", "Normal",
"Nass", "Normal",
"Nass", "Normal",
"Nass", "Normal"))
names(comparison_wet_normal) <- "race_type"
comparison_wet_normal$values <- c(avg_pos_neg_comments_wet,
avg_pos_neg_comments_normal,
avg_viewcount_wet,
avg_viewcount_normal,
avg_likecount_wet,
avg_likecount_normal,
avg_dislikecount_wet,
avg_dislikecount_normal)
comparison_wet_normal$column <- c("pos_neg_comments", "pos_neg_comments",
"viewcount", "viewcount",
"likecount", "likecount",
"dislike_count", "dislike_count")
# Create a plot for the viewcount
plot1 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="viewcount",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittliche Zuschaueranzahl") + ylab("")
# Create a plot for likecount
plot2 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="likecount",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittliche Anzahl an Likes") + ylab("")
# Create a plot for dislike count
plot3 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="dislike_count",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittliche Anzahl an Dislikes") + ylab("")
# Create a plot for average number of positive/negative comments
plot4 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())  +
xlab("Anteil pos./neg. Kommentare") + ylab("")
# Create a legend for the plot
plot_legend <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",]
,aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity",
position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "right", legend.direction = "horizontal", legend.title = element_blank())
# Some magic for creating a single legend for all the plots together
extract_legend <- function(my_ggp) {
step1 <- ggplot_gtable(ggplot_build(my_ggp))
step2 <- which(sapply(step1$grobs, function(x) x$name) == "guide-box")
step3 <- step1$grobs[[step2]]
return(step3)
}
shared_legend <- extract_legend(plot_legend)
# Create a grid with all the plots together and add the legend created above
grid.arrange(arrangeGrob(plot1,plot2,plot3,plot4, ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
# Create a dataframe only including the wet weather races
wet_weather_races <- datax[datax$wetweather==1,]
# Average total pos neg comments for wet weather races
avg_pos_neg_comments_wet <- (sum(wet_weather_races$Positive_tweets)+
sum(wet_weather_races$Negative_tweets))/
sum(wet_weather_races$Useful_tweets)
# Average total pos neg comments for normal races
avg_pos_neg_comments_normal <-
(sum(datax[datax$wetweather==0,]$Positive_tweets)+
sum(datax[datax$wetweather==0,]$Negative_tweets))/
sum(datax[datax$wetweather==0,]$Useful_tweets)
# Average excitement index for wet weather races
avg_excitement_index_wet <- sum(wet_weather_races$Excitement_index)/
dim(wet_weather_races)[1]
# Average excitement index for normal races
avg_excitement_index_normal <-
sum(datax[datax$wetweather==0,]$Excitement_index)/
dim(datax[datax$wetweather==0,])[1]
# Creating a dataframe with all the KPIs, so that they can be displayed in a
# plot.
comparison_wet_normal <- data.frame(c("Nass", "Normal",
"Nass", "Normal"))
names(comparison_wet_normal) <- "race_type"
comparison_wet_normal$values <- c(avg_pos_neg_comments_wet,
avg_pos_neg_comments_normal,
avg_excitement_index_wet,
avg_excitement_index_normal)
comparison_wet_normal$column <- c("pos_neg_comments", "pos_neg_comments",
"excitement_index", "excitement_index")
# Create a plot for average number of positive/negative comments
plot1 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) + theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())  +
xlab("Anteil positiver/negativer Tweets") + ylab("")
# Create a plot for the excitement_index
plot2 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="excitement_index",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittlicher Excitement index") + ylab("")
# Create a legend for the plot
plot_legend <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",]
,aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity",
position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "right", legend.direction = "horizontal", legend.title = element_blank())
# Some magic for creating a single legend for all the plots together
extract_legend <- function(my_ggp) {
step1 <- ggplot_gtable(ggplot_build(my_ggp))
step2 <- which(sapply(step1$grobs, function(x) x$name) == "guide-box")
step3 <- step1$grobs[[step2]]
return(step3)
}
shared_legend <- extract_legend(plot_legend)
# Create a grid with all the plots together and add the legend created above
grid.arrange(arrangeGrob(plot1,plot2, ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
library(dplyr)
library(plyr)
library(ggplot2)
library(gridExtra)
datax = read.csv("../Data/twitter_sentiments.csv")
colnames(datax)
ggplot(data = datax,aes(x=Excitement_index,y= novertakes))+
geom_point(aes(color=factor(wetweather)))+scale_color_manual(
name= "Condition of track",
breaks = c(0,1),
values = c("orange","blue"),
labels= c("Normal","Wet"),
)+ylab("Number of overtakes in a race")+
xlab("Excitement index of race")+
geom_smooth(method = "lm", color = "red", se=FALSE)
ggplot(data = datax,aes(x=Excitement_index,y= unfin,color=factor(wetweather)))+
geom_point()+scale_color_manual(
name= "Condition of track",
breaks = c(0,1),
values = c("orange","blue"),
labels= c("Normal","Wet"),
)+ylab("NUmber of unfinished drivers")+
xlab("Excitement index of race")+geom_smooth(method = "lm",se=FALSE)
ggplot(data = datax,aes(x=Excitement_index,y= unfin/totaldrivers))+
geom_point(aes(color=factor(wetweather)))+scale_color_manual(
name= "Condition of track",
breaks = c(0,1),
values = c("orange","blue"),
labels= c("Normal","Wet"),
)+ylab("Proportion of unfinished drivers")+
xlab("Rating of race")+geom_smooth(method = "lm", color = "red", se=FALSE)
t.test(datax[datax$wetweather == 0,]$Excitement_index,datax[datax$wetweather == 1,]$Excitement_index,alternative = 'l')
datax$wetweather <- as.factor(datax$wetweather)
mu <- datax %>% group_by(wetweather) %>% summarise_at(vars(Excitement_index),list(name=mean))
mu
ggplot(data=datax,aes(x=Excitement_index,fill=factor(wetweather)))+geom_density(alpha=0.5)+
scale_fill_manual(
name= "Condition of track",
values = c("orange","blue"),labels=c("Normal","Wet")
)+xlab("Excitement index of race")+
ylab("Density")+
geom_vline(data=mu,aes(xintercept=name,color = wetweather),linetype="dashed",show.legend=FALSE)
#annotate(geom="text",label="p-value=",x=5,y=0.57)
ggplot(data = datax,aes(y=Excitement_index,x= wetweather))+
geom_boxplot(aes(group=wetweather,fill=factor(wetweather)))+scale_fill_manual(
name= "Condition of track",
values = c("orange","blue"),labels=c("Normal","Wet")
)+xlab("Condition of Track")+
ylab("Excitement index of race")
#annotate(geom="text",label="p-value=0.0000001196",x=2.2,y=9.9)
ggplot(data = datax,aes(sample=Excitement_index,color=factor(wetweather)))+
stat_qq()+scale_color_manual(breaks = c(0,1),name= "Condition of track",
values = c("orange","blue"),
labels= c("Normal","Wet"),
)+
geom_hline(yintercept = mean(datax[datax$wetweather==0,]$Excitement_index),color="orange")+
geom_hline(yintercept = mean(datax[datax$wetweather==1,]$Excitement_index),color="blue")+
ylab("Quantiles of race Excitement index")+xlab("Quantiles of normal distribution")
dataxx <- datax %>% mutate(novertakes= (novertakes-mean(novertakes))/sd(novertakes))%>%
mutate(Excitement_index = (Excitement_index-mean(Excitement_index))/sd(Excitement_index)) %>% mutate(unfin = (unfin-mean(unfin))/sd(unfin))
lin=lm(Excitement_index ~ novertakes+unfin+wetweather,data = dataxx)
summary(lin)
name = c("Intercept","Number of overtakes","Unfinished drivers","wet weather")
coef = lin$coefficients
conf1 = confint(lin)[,1]
conf2 = confint(lin)[,2]
df1 <- data.frame(name, coef, conf1, conf2)
df1
ggplot(data=df1, aes(x=coef,y=name))+geom_errorbar(width = .1, aes(xmin= conf1, xmax=conf2))+
geom_point(shape= 21, size =3, fill="blue")+
geom_vline(xintercept = 0, linetype="dashed", color="red")+xlab("Coefficient of linear regression")+
ylab("Regressors")
# Create a dataframe only including the wet weather races
wet_weather_races <- datax[datax$wetweather==1,]
# Average total pos neg comments for wet weather races
avg_pos_neg_comments_wet <- (sum(wet_weather_races$Positive_tweets)+
sum(wet_weather_races$Negative_tweets))/
sum(wet_weather_races$Useful_tweets)
# Average total pos neg comments for normal races
avg_pos_neg_comments_normal <-
(sum(datax[datax$wetweather==0,]$Positive_tweets)+
sum(datax[datax$wetweather==0,]$Negative_tweets))/
sum(datax[datax$wetweather==0,]$Useful_tweets)
# Average excitement index for wet weather races
avg_excitement_index_wet <- sum(wet_weather_races$Excitement_index)/
dim(wet_weather_races)[1]
# Average excitement index for normal races
avg_excitement_index_normal <-
sum(datax[datax$wetweather==0,]$Excitement_index)/
dim(datax[datax$wetweather==0,])[1]
# Creating a dataframe with all the KPIs, so that they can be displayed in a
# plot.
comparison_wet_normal <- data.frame(c("Nass", "Normal",
"Nass", "Normal"))
names(comparison_wet_normal) <- "race_type"
comparison_wet_normal$values <- c(avg_pos_neg_comments_wet,
avg_pos_neg_comments_normal,
avg_excitement_index_wet,
avg_excitement_index_normal)
comparison_wet_normal$column <- c("pos_neg_comments", "pos_neg_comments",
"excitement_index", "excitement_index")
# Create a plot for average number of positive/negative comments
plot1 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) + theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())  +
xlab("Anteil positiver/negativer Tweets") + ylab("")
# Create a plot for the excitement_index
plot2 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="excitement_index",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittlicher Excitement index") + ylab("")
# Create a legend for the plot
plot_legend <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",]
,aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity",
position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "right", legend.direction = "horizontal", legend.title = element_blank())
# Some magic for creating a single legend for all the plots together
extract_legend <- function(my_ggp) {
step1 <- ggplot_gtable(ggplot_build(my_ggp))
step2 <- which(sapply(step1$grobs, function(x) x$name) == "guide-box")
step3 <- step1$grobs[[step2]]
return(step3)
}
shared_legend <- extract_legend(plot_legend)
# Create a grid with all the plots together and add the legend created above
grid.arrange(arrangeGrob(plot1,plot2, ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
# Create a dataframe only including the wet weather races
wet_weather_races <- datax[datax$wetweather==1,]
# Average total pos neg comments for wet weather races
avg_pos_neg_comments_wet <- (sum(wet_weather_races$Positive_tweets)+
sum(wet_weather_races$Negative_tweets))/
sum(wet_weather_races$Useful_tweets)
# Average total pos neg comments for normal races
avg_pos_neg_comments_normal <-
(sum(datax[datax$wetweather==0,]$Positive_tweets)+
sum(datax[datax$wetweather==0,]$Negative_tweets))/
sum(datax[datax$wetweather==0,]$Useful_tweets)
# Average excitement index for wet weather races
avg_excitement_index_wet <- sum(wet_weather_races$Excitement_index)/
dim(wet_weather_races)[1]
# Average excitement index for normal races
avg_excitement_index_normal <-
sum(datax[datax$wetweather==0,]$Excitement_index)/
dim(datax[datax$wetweather==0,])[1]
# Creating a dataframe with all the KPIs, so that they can be displayed in a
# plot.
comparison_wet_normal <- data.frame(c("Nass", "Normal",
"Nass", "Normal"))
names(comparison_wet_normal) <- "race_type"
comparison_wet_normal$values <- c(avg_pos_neg_comments_wet,
avg_pos_neg_comments_normal,
avg_excitement_index_wet,
avg_excitement_index_normal)
comparison_wet_normal$column <- c("pos_neg_comments", "pos_neg_comments",
"excitement_index", "excitement_index")
# Create a plot for average number of positive/negative comments
plot1 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) + theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())  +
xlab("Anteil positiver/negativer Tweets") + ylab("")
# Create a plot for the excitement_index
plot2 <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="excitement_index",],
aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "none", axis.text.x = element_blank(),
axis.ticks.x = element_blank()) + xlab("Durchschnittlicher Excitement index") + ylab("")
# Create a legend for the plot
plot_legend <- ggplot(data=comparison_wet_normal[comparison_wet_normal$column=="pos_neg_comments",]
,aes(x=column, y=values, fill=race_type)) +
geom_bar(stat="identity",
position=position_dodge()) + scale_fill_manual(values=c("#B5074A", "#432D57")) +
theme(legend.position = "right", legend.direction = "horizontal", legend.title = element_blank())
# Some magic for creating a single legend for all the plots together
extract_legend <- function(my_ggp) {
step1 <- ggplot_gtable(ggplot_build(my_ggp))
step2 <- which(sapply(step1$grobs, function(x) x$name) == "guide-box")
step3 <- step1$grobs[[step2]]
return(step3)
}
shared_legend <- extract_legend(plot_legend)
# Create a grid with all the plots together and add the legend created above
grid.arrange(arrangeGrob(plot1,plot2, ncol = 2),
shared_legend, nrow = 2, heights = c(10, 1))
